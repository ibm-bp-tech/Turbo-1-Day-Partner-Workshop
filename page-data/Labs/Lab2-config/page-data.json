{
    "componentChunkName": "component---src-pages-labs-lab-2-config-mdx",
    "path": "/Labs/Lab2-config/",
    "result": {"pageContext":{"frontmatter":{"title":"Lab2"},"relativePagePath":"/Labs/Lab2-config.mdx","titleType":"page","MdxNode":{"id":"e2835cd8-be17-5d73-985d-ae76684d2c4c","children":[],"parent":"c2e45392-4ae4-5563-8836-db457637488a","internal":{"content":"---\r\ntitle: Lab2\r\n---\r\nexport const Title = () => (\r\n  <span>\r\n    Lab 2 - Add Kubernetes Target <br />\r\n  </span>\r\n)\r\n;\r\n\r\n## Adding Kubernetes Target\r\n\r\nThe Turbonomic platform gathers information from Kubernetes/OpenShift environment through **Kubeturbo** that is deployed into the Kubernetes/OpenShift cluster that you want to manage. Kubeturbo will run a single pod deployment with the following resources:\r\n\r\n- Namespace or Project (default: turbo)\r\n- Service Account\r\n- Rolebinding defined\r\n- ConfigMap which contains the connection to the Turbonomic server\r\n- Deployment for Kubeturbo pod.\r\n\r\n\r\nMore information is available on the [Kubeturbo Wiki](https://github.com/turbonomic/kubeturbo/wiki). In this tutorial, you will be installing Kubeturbo via helm chart.\r\n\r\n### Kubeturbo deployment via Helm charts\r\n\r\nAs per the requirements, for the KubeTurbo to communicate with the Turbonomic server, you need\r\n* Turbonomic URL: https://10.0.0.1\r\n* ServiceAccount: kubeserviceaccount (you will create this as described below)\r\n\r\n### Create Service Account\r\n\r\nThe various steps to create a service account are:\r\n\r\n- From your Turbonomic UI navigate to Settings -> User Management \r\n\r\n  ![user_mgmt](img/addtargets/usermgmt.png)\r\n\r\n- Select **NEW LOCAL USER**  \r\n  ![lu](img/addtargets/newlu1.png)\r\n\r\n- For the user details, please fill as\r\n  - **USERNAME**: kubeserviceaccount\r\n  - **PASSWORD**: CoC#Rulz! (as referenced in the \"Turbo-PoT-Credentials\")\r\n  - **ROLE**: Site Administrator (default)\r\n  - and then click **SAVE**  \r\n  ![newuser](img/addtargets/userdetails.png)\r\n\r\n- Validate the user is created  \r\n  ![usercr](img/addtargets/usercreated.png)\r\n\r\n### Install Kubeturbo on the Kubernetes cluster\r\n\r\nThe Kubeturbo is installed on the provided Kubernetes cluster. In this section, you will SSH into your Kubernetes cluster from your bastion VM. **So all commands will be executed from your bastion VM's Terminal window.**\r\n\r\n- Find the Turbonomic Server Version from the console: The version here is **8.8.2**, as shown in the picture.  \r\n  \r\n  ![turbo_version](img/addtargets/turbosrv_version.png)\r\n\r\n- Open a Terminal window in your bastion VM. Navigate to \"Activities\" from the top left and click on Terminal.\r\n\r\n- SSH to server kmaster (IPAddress: 10.0.0.3) using **user-id: cocuser**, **password: Refer to \"Turbo-PoT-Credentials\" on you bastion VM** and **ssh port: 2022**\r\n  \r\n  ```\r\n  ssh -p 2022 cocuser@10.0.0.3\r\n  ```\r\n\r\n  To list all the helm releases in the cluster, execute the command below.\r\n  ```\r\n  helm ls -A \r\n  ```\r\n\r\n  For example: to view the release for the Instana agent only, run this command\r\n  ```\r\n  helm ls -n instana-agent\r\n  ```\r\n\r\n  The result will be something like this:\r\n   ```javascript\r\n   NAME           NAMESPACE    \tREVISION\tUPDATED                                \tSTATUS  \tCHART               \tAPP VERSION\r\n   instana-agent instana-agent\t1       \t2023-03-20 23:33:01.070041691 -0400 EDT\tdeployed\tinstana-agent-1.2.56\t1.244.0\r\n    ```\r\n [Kubeturbo git](https://github.com/turbonomic/kubeturbo.git) is cloned locally. Then follow the steps:\r\n\r\n  ```\r\n  cd kubeturbo/deploy\r\n  kubectl create ns turbo\r\n  ```\r\n\r\n  The result should be like this:\r\n  ```\r\n  namespace/turbo created\r\n  cocuser@kmaster:~/kubeturbo/deploy$ \r\n  ```\r\n\r\n Next run the following install command to install kubeturbo:\r\n\r\n<InlineNotification>\r\n\r\nCopying this multi-line command and paste it directly to the Terminal will not work. Issues with mult-line formatting on the shell.\r\n\r\n</InlineNotification>\r\n\r\n As a workaround do the following:\r\n - ** Copy the bellow multi-line command **\r\n - ** Open a Text Editor in the Bastion Server by dothing the following: **\r\n - . Select Activities\r\n - . Select Show Application (the 3x3 icon)\r\n - . Select Text Editor\r\n - ** Paste the \"multi-line command\" **\r\n - ** Copy it again and then paste into the Terminal Session **\r\n  \r\n\r\n\r\n\r\n  ```\r\n  helm install  kubeturbo  ./kubeturbo --namespace turbo \\\r\n       --set serverMeta.turboServer=https://10.0.0.1 \\\r\n       --set serverMeta.version=8.8.2 --set image.tag=8.8.2 \\\r\n       --set restAPIConfig.opsManagerUserName=kubeserviceaccount \\\r\n       --set restAPIConfig.opsManagerPassword='CoC#Rulz!' \\\r\n       --set targetConfig.targetName=kubecluster1\r\n  ```\r\n\r\n  Will give output as:\r\n\r\n  ```\r\n  NAME: kubeturbo\r\n  LAST DEPLOYED: Thu Mar 30 20:34:33 2023\r\n  NAMESPACE: turbo\r\n  STATUS: deployed\r\n  REVISION: 1\r\n  TEST SUITE: None\r\n  ```\r\n\r\n<InlineNotification>\r\n\r\n**Tip**: \r\nThe following commands may be handy, in case you run into issues and need to troubleshoot.  Do not use the below helm commands unless your helm install failed.  See the next set of kubectl commands for installation validation.\r\n\r\n</InlineNotification>\r\n\r\n\r\n## To remove helm release\r\n\r\n```\r\nhelm delete kubeturbo -n turbo \r\n```\r\n## To upgrade an existing release\r\n```\r\nhelm upgrade  kubeturbo  ./kubeturbo --namespace turbo \\\r\n    --set serverMeta.turboServer=https://10.0.0.1 \\\r\n    --set serverMeta.version=8.8.2 --set image.tag=8.8.2 \\\r\n    --set restAPIConfig.opsManagerUserName=kubeserviceaccount \\\r\n    --set restAPIConfig.opsManagerPassword=myPassw0rd \\\r\n    --set targetConfig.targetName=kubecluster1\r\n```\r\n## To set the context for a namespace\r\n\r\n```\r\nkubectl config set-context --current --namespace=turbo\r\n```\r\n\r\nCheck the logs to see if kubeturbo communicates with the Turbonomic Server.\r\n  \r\n  ```\r\n  kubectl -n turbo get pods \r\n  ```\r\n\r\n  The result will be like following:\r\n  ```\r\n  output\r\n  ------\r\n  NAME                         READY   STATUS    RESTARTS   AGE\r\n  kubeturbo-5fb9df466d-l7lk4   1/1     Running   0          5m47s\r\n  ```\r\n  To check the logs for this pod take your pod's name from the output of the previous command and run the command below using your pod name.\r\n  ```\r\n  kubectl -n turbo logs -f kubeturbo-5fb9df466d-l7lk4\r\n  ```\r\n\r\n  The result will be a loop that keeps printing the logs for that pod, similar to the snippet below:\r\n\r\n  ```\r\n  snippet of output\r\n  -----------------\r\n  I0331 14:35:10.398686       1 kubeturbo_builder.go:519] ********** Start running Kubeturbo Service **********\r\n  I0331 14:35:10.398736       1 mediation_container.go:67] Initializing mediation container .....\r\n  I0331 14:35:10.398740       1 mediation_container.go:74] Registering 1 probes\r\n  I0331 14:35:10.398769       1 client_websocket_transport.go:381] Trying websocket connection to: wss://10.0.0.1/vmturbo/remoteMediation\r\n  I0331 14:35:10.407740       1 client_websocket_transport.go:384] Successfully connected to api service at: wss://10.0.0.1/vmturbo/remoteMediation\r\n  I0331 14:35:10.407779       1 client_websocket_transport.go:305] Connected to server 10.0.0.1:443::192.168.1.219:40362\r\n  I0331 14:35:10.407785       1 client_websocket_transport.go:306] WebSocket transport layer is ready.\r\n  I0331 14:35:10.407799       1 remote_mediation_client.go:92] Start sdk client protocol ........\r\n  I0331 14:35:10.407814       1 sdk_client_protocol.go:35] Starting protocol negotiation ....\r\n  I0331 14:35:10.411017       1 sdk_client_protocol.go:118] Protocol negotiation result: ACCEPTED. Protocol version \"8.8.2\" is allowed to interact with server.\r\n  ```\r\n**Tip:** to break out of the logs loop you can do a ctrl+c.\r\n\r\n- Now validate that the kubeturbo that is installed is showing up in the Turbonomic console. \r\n  - Go to Settings -> Target Configuration.\r\n    \r\n    ![settings](img/addtargets/kubeturbo_target.png)\r\n\r\n  - Click on **Cloud Native**\r\n  - You will see the added kubernetes target with the name **Kubernetes-kubecluster1** (kubecluster1 is the name you specified during helm chart install).\r\n  \r\n    ![settings1](img/addtargets/kubeturbo_target1.png)\r\n\r\n- Now you can search for this cluster.\r\n  ![search](img/addtargets/search_cluster.png)\r\n\r\n","type":"Mdx","contentDigest":"2614db5e739a45fff0e298c61b00de56","owner":"gatsby-plugin-mdx","counter":5725},"frontmatter":{"title":"Lab2"},"exports":{},"rawBody":"---\r\ntitle: Lab2\r\n---\r\nexport const Title = () => (\r\n  <span>\r\n    Lab 2 - Add Kubernetes Target <br />\r\n  </span>\r\n)\r\n;\r\n\r\n## Adding Kubernetes Target\r\n\r\nThe Turbonomic platform gathers information from Kubernetes/OpenShift environment through **Kubeturbo** that is deployed into the Kubernetes/OpenShift cluster that you want to manage. Kubeturbo will run a single pod deployment with the following resources:\r\n\r\n- Namespace or Project (default: turbo)\r\n- Service Account\r\n- Rolebinding defined\r\n- ConfigMap which contains the connection to the Turbonomic server\r\n- Deployment for Kubeturbo pod.\r\n\r\n\r\nMore information is available on the [Kubeturbo Wiki](https://github.com/turbonomic/kubeturbo/wiki). In this tutorial, you will be installing Kubeturbo via helm chart.\r\n\r\n### Kubeturbo deployment via Helm charts\r\n\r\nAs per the requirements, for the KubeTurbo to communicate with the Turbonomic server, you need\r\n* Turbonomic URL: https://10.0.0.1\r\n* ServiceAccount: kubeserviceaccount (you will create this as described below)\r\n\r\n### Create Service Account\r\n\r\nThe various steps to create a service account are:\r\n\r\n- From your Turbonomic UI navigate to Settings -> User Management \r\n\r\n  ![user_mgmt](img/addtargets/usermgmt.png)\r\n\r\n- Select **NEW LOCAL USER**  \r\n  ![lu](img/addtargets/newlu1.png)\r\n\r\n- For the user details, please fill as\r\n  - **USERNAME**: kubeserviceaccount\r\n  - **PASSWORD**: CoC#Rulz! (as referenced in the \"Turbo-PoT-Credentials\")\r\n  - **ROLE**: Site Administrator (default)\r\n  - and then click **SAVE**  \r\n  ![newuser](img/addtargets/userdetails.png)\r\n\r\n- Validate the user is created  \r\n  ![usercr](img/addtargets/usercreated.png)\r\n\r\n### Install Kubeturbo on the Kubernetes cluster\r\n\r\nThe Kubeturbo is installed on the provided Kubernetes cluster. In this section, you will SSH into your Kubernetes cluster from your bastion VM. **So all commands will be executed from your bastion VM's Terminal window.**\r\n\r\n- Find the Turbonomic Server Version from the console: The version here is **8.8.2**, as shown in the picture.  \r\n  \r\n  ![turbo_version](img/addtargets/turbosrv_version.png)\r\n\r\n- Open a Terminal window in your bastion VM. Navigate to \"Activities\" from the top left and click on Terminal.\r\n\r\n- SSH to server kmaster (IPAddress: 10.0.0.3) using **user-id: cocuser**, **password: Refer to \"Turbo-PoT-Credentials\" on you bastion VM** and **ssh port: 2022**\r\n  \r\n  ```\r\n  ssh -p 2022 cocuser@10.0.0.3\r\n  ```\r\n\r\n  To list all the helm releases in the cluster, execute the command below.\r\n  ```\r\n  helm ls -A \r\n  ```\r\n\r\n  For example: to view the release for the Instana agent only, run this command\r\n  ```\r\n  helm ls -n instana-agent\r\n  ```\r\n\r\n  The result will be something like this:\r\n   ```javascript\r\n   NAME           NAMESPACE    \tREVISION\tUPDATED                                \tSTATUS  \tCHART               \tAPP VERSION\r\n   instana-agent instana-agent\t1       \t2023-03-20 23:33:01.070041691 -0400 EDT\tdeployed\tinstana-agent-1.2.56\t1.244.0\r\n    ```\r\n [Kubeturbo git](https://github.com/turbonomic/kubeturbo.git) is cloned locally. Then follow the steps:\r\n\r\n  ```\r\n  cd kubeturbo/deploy\r\n  kubectl create ns turbo\r\n  ```\r\n\r\n  The result should be like this:\r\n  ```\r\n  namespace/turbo created\r\n  cocuser@kmaster:~/kubeturbo/deploy$ \r\n  ```\r\n\r\n Next run the following install command to install kubeturbo:\r\n\r\n<InlineNotification>\r\n\r\nCopying this multi-line command and paste it directly to the Terminal will not work. Issues with mult-line formatting on the shell.\r\n\r\n</InlineNotification>\r\n\r\n As a workaround do the following:\r\n - ** Copy the bellow multi-line command **\r\n - ** Open a Text Editor in the Bastion Server by dothing the following: **\r\n - . Select Activities\r\n - . Select Show Application (the 3x3 icon)\r\n - . Select Text Editor\r\n - ** Paste the \"multi-line command\" **\r\n - ** Copy it again and then paste into the Terminal Session **\r\n  \r\n\r\n\r\n\r\n  ```\r\n  helm install  kubeturbo  ./kubeturbo --namespace turbo \\\r\n       --set serverMeta.turboServer=https://10.0.0.1 \\\r\n       --set serverMeta.version=8.8.2 --set image.tag=8.8.2 \\\r\n       --set restAPIConfig.opsManagerUserName=kubeserviceaccount \\\r\n       --set restAPIConfig.opsManagerPassword='CoC#Rulz!' \\\r\n       --set targetConfig.targetName=kubecluster1\r\n  ```\r\n\r\n  Will give output as:\r\n\r\n  ```\r\n  NAME: kubeturbo\r\n  LAST DEPLOYED: Thu Mar 30 20:34:33 2023\r\n  NAMESPACE: turbo\r\n  STATUS: deployed\r\n  REVISION: 1\r\n  TEST SUITE: None\r\n  ```\r\n\r\n<InlineNotification>\r\n\r\n**Tip**: \r\nThe following commands may be handy, in case you run into issues and need to troubleshoot.  Do not use the below helm commands unless your helm install failed.  See the next set of kubectl commands for installation validation.\r\n\r\n</InlineNotification>\r\n\r\n\r\n## To remove helm release\r\n\r\n```\r\nhelm delete kubeturbo -n turbo \r\n```\r\n## To upgrade an existing release\r\n```\r\nhelm upgrade  kubeturbo  ./kubeturbo --namespace turbo \\\r\n    --set serverMeta.turboServer=https://10.0.0.1 \\\r\n    --set serverMeta.version=8.8.2 --set image.tag=8.8.2 \\\r\n    --set restAPIConfig.opsManagerUserName=kubeserviceaccount \\\r\n    --set restAPIConfig.opsManagerPassword=myPassw0rd \\\r\n    --set targetConfig.targetName=kubecluster1\r\n```\r\n## To set the context for a namespace\r\n\r\n```\r\nkubectl config set-context --current --namespace=turbo\r\n```\r\n\r\nCheck the logs to see if kubeturbo communicates with the Turbonomic Server.\r\n  \r\n  ```\r\n  kubectl -n turbo get pods \r\n  ```\r\n\r\n  The result will be like following:\r\n  ```\r\n  output\r\n  ------\r\n  NAME                         READY   STATUS    RESTARTS   AGE\r\n  kubeturbo-5fb9df466d-l7lk4   1/1     Running   0          5m47s\r\n  ```\r\n  To check the logs for this pod take your pod's name from the output of the previous command and run the command below using your pod name.\r\n  ```\r\n  kubectl -n turbo logs -f kubeturbo-5fb9df466d-l7lk4\r\n  ```\r\n\r\n  The result will be a loop that keeps printing the logs for that pod, similar to the snippet below:\r\n\r\n  ```\r\n  snippet of output\r\n  -----------------\r\n  I0331 14:35:10.398686       1 kubeturbo_builder.go:519] ********** Start running Kubeturbo Service **********\r\n  I0331 14:35:10.398736       1 mediation_container.go:67] Initializing mediation container .....\r\n  I0331 14:35:10.398740       1 mediation_container.go:74] Registering 1 probes\r\n  I0331 14:35:10.398769       1 client_websocket_transport.go:381] Trying websocket connection to: wss://10.0.0.1/vmturbo/remoteMediation\r\n  I0331 14:35:10.407740       1 client_websocket_transport.go:384] Successfully connected to api service at: wss://10.0.0.1/vmturbo/remoteMediation\r\n  I0331 14:35:10.407779       1 client_websocket_transport.go:305] Connected to server 10.0.0.1:443::192.168.1.219:40362\r\n  I0331 14:35:10.407785       1 client_websocket_transport.go:306] WebSocket transport layer is ready.\r\n  I0331 14:35:10.407799       1 remote_mediation_client.go:92] Start sdk client protocol ........\r\n  I0331 14:35:10.407814       1 sdk_client_protocol.go:35] Starting protocol negotiation ....\r\n  I0331 14:35:10.411017       1 sdk_client_protocol.go:118] Protocol negotiation result: ACCEPTED. Protocol version \"8.8.2\" is allowed to interact with server.\r\n  ```\r\n**Tip:** to break out of the logs loop you can do a ctrl+c.\r\n\r\n- Now validate that the kubeturbo that is installed is showing up in the Turbonomic console. \r\n  - Go to Settings -> Target Configuration.\r\n    \r\n    ![settings](img/addtargets/kubeturbo_target.png)\r\n\r\n  - Click on **Cloud Native**\r\n  - You will see the added kubernetes target with the name **Kubernetes-kubecluster1** (kubecluster1 is the name you specified during helm chart install).\r\n  \r\n    ![settings1](img/addtargets/kubeturbo_target1.png)\r\n\r\n- Now you can search for this cluster.\r\n  ![search](img/addtargets/search_cluster.png)\r\n\r\n","fileAbsolutePath":"/Users/brandonwu/Documents/PTS/Gatsby/Turbo-1-Day-Partner-Workshop/src/pages/Labs/Lab2-config.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}